package gen

const templateFuncContent = `
// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package {TplPackageName}

import (
	"database/sql"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/os/gtime"
	"iot-message-distribution/app"
	"math"
)

//保存数据
func (m *arModel) SaveData(data g.Map) (result sql.Result, err error) {
	data["created_at"] = gtime.Now().TimestampMilli()

	return m.Insert(data)
}

//更新数据
func (m *arModel) UpdateData(data g.Map) (result sql.Result, err error) {
	data["updated_at"] = gtime.Now().TimestampMilli()

	return m.Update(data)
}

//软删除
func (m *arModel) SoftDeleteData(data g.Map) (result sql.Result, err error) {
	data["deleted_at"] = gtime.Now().TimestampMilli()
	data["is_on"] = 0

	return m.Update(data)
}

//获取所有数据
func (m *arModel) Get() (result jModel, err error) {
	list, err := m.All()

	return jModel{
		List: list,
	}, err
}

//获取分页
func (m *arModel) GetPage(page int, pagesize int) (result jModel, err error) {
	list, err := m.Page(page, pagesize).All()
	if err != nil {
		return result, err
	}

	count, err := m.Fields("*").Count()
	if err != nil {
		return result, err
	}

	//计算总页数
	pagecount := int(math.Ceil(float64(count) / float64(pagesize)))

	return jModel{
		List: list,
		Page: app.Page{
			Total:       count,
			CurrentPage: page,
			PageSize:    pagesize,
			TotalPage:   pagecount,
			CurrentSize: len(list),
		},
	}, nil
}

type jModel struct {
	List []*Entity

	Page app.Page
}

//获取一条
func (j jModel) FindOne(callback func(*Entity) bool) *Entity {

	for _, item := range j.List {
		if callback(item) {
			return item
		}
	}

	return nil
}

//过滤列表
func (j jModel) Filter(callback func(*Entity) bool) []*Entity {

	filterList := []*Entity{}

	for _, item := range j.List {
		if callback(item) {
			filterList = append(filterList, item)
		}
	}

	return filterList
}
`
